/*
 * Copyright (c) 2020 Â· Marton Lederer
 * This file was created / generated by Marton Lederer
 * See the LICENSE on the github repo
 * https://github.com/MartonDev
 * https://marton.lederer.hu
 */

import { PNGImage } from '../../mod.ts'

export function savePNGImage () {

  //creating the image canvas
  const png = new PNGImage(300, 300, 10, { r: 0, g: 0, b: 0, a: 0 }),
    //creating a color
    customColor = png.createRGBColor({ r: 255, g: 0, b: 0, a: 1 })

  for(let i = 0; i < 290; i++) {

    //drawing on a pixel
    png.setPixel(i, i, customColor)
    png.setPixel(i + 1, i, customColor)
    png.setPixel(i + 2, i, customColor)

  }

  //saving the file using the buffer
  Deno.writeFileSync('./test/img/test.png', png.getBuffer())

}

export function getPNGbase64String () {

  //creating the image canvas
  const png = new PNGImage(1920, 1080)

  for(let i = 0; i < 1920; i++)
    for(let j = 0; j < 40; j++)
      png.setPixel(i, 520 + j, png.createRGBColor({ r: 20, g: 180, b: 210, a: 0.5 }))

  //getting a base64 string
  console.log(png.getBase64())

  //saving the file
  Deno.writeFileSync('./test/img/base64_string_test.png', png.getBuffer())

}

export function getPNGbase64URL () {

  //creating the image canvas
  const png = new PNGImage(300, 300, 4, { r: 0, g: 0, b: 0, a: 0 }),
    //creating a color
    red = png.createRGBColor({ r: 255, g: 0, b: 0, a: 1 })

  for(let i = 0; i < 290; i++) {

    //drawing on a pixel
    png.setPixel(i, i, red)
    png.setPixel(i + 1, i, red)
    png.setPixel(i + 2, i, red)

  }

  //getting a data url
  //this can be used in an src attr in an html image tag
  console.log(png.getDataURL())

  //saving the file
  Deno.writeFileSync('./test/img/base64_html_src_tag_test.png', png.getBuffer())

}

export function getPixelFromImage () {

  //creating the image canvas
  const png = new PNGImage(1920, 1080)

  for(let i = 0; i < 1920; i++)
    for(let j = 0; j < 40; j++) {

      let randomRed = Math.floor(Math.random() * 250)

      //drawing on a pixel
      png.setPixel(i, 520 + j, png.createRGBColor({ r: randomRed, g: 20, b: 10, a: 0.75 }))
      //getting color
      console.log(`Pixel (${i} ${520 + j})'s color is:`, png.getPixel(i, 520 + j))

    }

  //no color: 0
  console.log(`Pixel (1919 1079)'s color is:`, png.getPixel(1919, 1079))

  //saving the file
  Deno.writeFileSync('./test/img/pixel_test.png', png.getBuffer())

}

export function drawLineOnPNG () {

  const png = new PNGImage(128, 128)
  png.drawLine(10, 60, 108, 8, png.createRGBColor({ r: 255, g: 20, b: 10, a: 0.75 }))

  Deno.writeFileSync('./test/img/line_test.png', png.getBuffer())

}

export function drawRectangleOnPNG () {

  const png = new PNGImage(128, 128)
  png.drawRect(20, 10, 100, 60, png.createRGBColor({ r: 255, g: 200, b: 10, a: 0.45 }))

  Deno.writeFileSync('./test/img/rect_test.png', png.getBuffer())

}

export function drawCircleOnPNG () {

  const png = new PNGImage(128, 128)
  png.drawCircle(40, 40, 20, png.createRGBColor({ r: 10, g: 168, b: 0, a: 0.45 }))

  Deno.writeFileSync('./test/img/circle_test.png', png.getBuffer())

}

export function drawBorderedRectangleOnPng () {

  const png = new PNGImage(128, 128)
  png.drawBorderedRect(10, 10, 80, 128, 1, png.createRGBColor({ r: 10, g: 86, b: 200, a: 0.8 }), png.createRGBColor({ r: 200, g: 86, b: 100, a: 0.5 }))

  Deno.writeFileSync('./test/img/bordered_rect_test.png', png.getBuffer())

}